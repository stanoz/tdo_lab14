name: 'Workflow tdo_lab14'
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types:
      - opened
      - synchronize
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment: (dev/production)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - production
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Set Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Get code
        uses: actions/checkout@v4
      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Lint code
        run: npm run lint
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Set Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Get code
        uses: actions/checkout@v4
      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Security audit
        run: npm audit --audit-level=high
  format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Set Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Get code
        uses: actions/checkout@v4
      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Check format
        id: format-check
        run: npm run format:check
        continue-on-error: true
      - name: Fix format on failure
        if: steps.format-check.outcome == 'failure'
        run: npx prettier . --write
  unit-tests:
    needs:
      - audit
      - format-check
      - lint
    strategy:
      matrix:
        node_version: [16, 18, 20]
    outputs:
          success: ${{ steps.test.outputs.success }}
    env:
        NODE_ENV: test
        NODE_VERSION: ${{ matrix.node_version }}
    environment: test
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node_version }}
      options: --cpus 2 --memory 4g
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Run unit tests
        run: npm run test:unit
      - name: Set success
        id: unit-tests
        run: echo "success=true" >> $GITHUB_OUTPUT
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
#  unit-tests:
#    strategy:
#      matrix:
#        node_version: [16, 18, 20]
#    runs-on: ubuntu-latest
#    outputs:
#      success: ${{ steps.test.outputs.success }}
#    env:
#      NODE_ENV: test
#      NODE_VERSION: ${{ matrix.node_version }}
#    environment: test
#    needs:
#      - audit
#      - format-check
#      - lint
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Docker Compose
#        run: docker compose up -d
#
#      - name: Run unit tests inside container
#        run: |
#          docker compose exec -T app npm run test:unit
#      - name: Set success
#        id: unit-tests
#        run: echo "success=true" >> $GITHUB_OUTPUT
#
#      - name: Ensure coverage dir exists
#        run: mkdir -p coverage/node-${{ matrix.node_version }}/lcov-report
#
#      - name: Copy coverage report from container
#        run: |
#          docker cp \
#            $(docker compose ps -q app):/app/coverage/junit-report-node-${{ matrix.node_version }} \
#            ./coverage/junit-report-node-${{ matrix.node_version }}
#
#      - name: Upload coverage report
#        uses: actions/upload-artifact@v4
#        with:
#          name: junit-report-node-${{ matrix.node_version }}
#          path: coverage/
  integraion-tests:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: integration
      NODE_VERSION: 18
    environment: test
    needs:
      - audit
      - format-check
      - lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose up -d

      - name: Run unit tests inside container
        run: |
          docker compose exec -T app npm run test:integration

      - name: Ensure coverage directory exists
        run: mkdir -p ./coverage

      - name: Copy coverage report from container
        run: |
            docker cp $(docker compose ps -q app):/app/coverage/lcov-report ./coverage/lcov-report
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: lcov-report
          path: ./coverage/lcov-report
  build-app:
    runs-on: ubuntu-latest
    needs:
      - integraion-tests
      - unit-tests
    steps:
      - name: Build the app
        if: ${{ needs.unit-tests.outputs.success == 'true' && needs.integraion-tests.result == 'success' }}
        run: echo "Building the app..."
  deploy-app:
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Deploy process
        id: deploy-process
        uses: ./.github/actions/deploy
        with:
          environment: 'node'
      - name: Display deployment URL and time
        run: |
          echo "Deployment URL ${{ steps.deploy-process.outputs.deployment-url}}"
          echo "Deployment time ${{ steps.deploy-process.outputs.deployment-time }}"

